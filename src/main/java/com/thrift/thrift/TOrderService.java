///**
// * Autogenerated by Thrift Compiler (0.9.3)
// *
// * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// *  @generated
// */
//package com.thrift.thrift;
//
//import org.apache.thrift.scheme.IScheme;
//import org.apache.thrift.scheme.SchemeFactory;
//import org.apache.thrift.scheme.StandardScheme;
//
//import org.apache.thrift.scheme.TupleScheme;
//import org.apache.thrift.protocol.TTupleProtocol;
//import org.apache.thrift.protocol.TProtocolException;
//import org.apache.thrift.EncodingUtils;
//import org.apache.thrift.TException;
//import org.apache.thrift.async.AsyncMethodCallback;
//import org.apache.thrift.server.AbstractNonblockingServer.*;
//import java.util.List;
//import java.util.ArrayList;
//import java.util.Map;
//import java.util.HashMap;
//import java.util.EnumMap;
//import java.util.Set;
//import java.util.HashSet;
//import java.util.EnumSet;
//import java.util.Collections;
//import java.util.BitSet;
//import java.nio.ByteBuffer;
//import java.util.Arrays;
//import javax.annotation.Generated;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
//
//@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
//@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-07")
//public class TOrderService {
//
//  public interface Iface {
//
//    public List<TOrder> getOrdersByUserId(int userId) throws TException;
//
//    public TOrder getOrderByOrderNumber(String orderNumber) throws TException;
//
//    public List<TOrder> getOrdersByStatus(int status) throws TException;
//
//  }
//
//  public interface AsyncIface {
//
//    public void getOrdersByUserId(int userId, AsyncMethodCallback resultHandler) throws TException;
//
//    public void getOrderByOrderNumber(String orderNumber, AsyncMethodCallback resultHandler) throws TException;
//
//    public void getOrdersByStatus(int status, AsyncMethodCallback resultHandler) throws TException;
//
//  }
//
//  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
//    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
//      public Factory() {}
//      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
//        return new Client(prot);
//      }
//      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
//        return new Client(iprot, oprot);
//      }
//    }
//
//    public Client(org.apache.thrift.protocol.TProtocol prot)
//    {
//      super(prot, prot);
//    }
//
//    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
//      super(iprot, oprot);
//    }
//
//    public List<TOrder> getOrdersByUserId(int userId) throws TException
//    {
//      send_getOrdersByUserId(userId);
//      return recv_getOrdersByUserId();
//    }
//
//    public void send_getOrdersByUserId(int userId) throws TException
//    {
//      getOrdersByUserId_args args = new getOrdersByUserId_args();
//      args.setUserId(userId);
//      sendBase("getOrdersByUserId", args);
//    }
//
//    public List<TOrder> recv_getOrdersByUserId() throws TException
//    {
//      getOrdersByUserId_result result = new getOrdersByUserId_result();
//      receiveBase(result, "getOrdersByUserId");
//      if (result.isSetSuccess()) {
//        return result.success;
//      }
//      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrdersByUserId failed: unknown result");
//    }
//
//    public TOrder getOrderByOrderNumber(String orderNumber) throws TException
//    {
//      send_getOrderByOrderNumber(orderNumber);
//      return recv_getOrderByOrderNumber();
//    }
//
//    public void send_getOrderByOrderNumber(String orderNumber) throws TException
//    {
//      getOrderByOrderNumber_args args = new getOrderByOrderNumber_args();
//      args.setOrderNumber(orderNumber);
//      sendBase("getOrderByOrderNumber", args);
//    }
//
//    public TOrder recv_getOrderByOrderNumber() throws TException
//    {
//      getOrderByOrderNumber_result result = new getOrderByOrderNumber_result();
//      receiveBase(result, "getOrderByOrderNumber");
//      if (result.isSetSuccess()) {
//        return result.success;
//      }
//      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrderByOrderNumber failed: unknown result");
//    }
//
//    public List<TOrder> getOrdersByStatus(int status) throws TException
//    {
//      send_getOrdersByStatus(status);
//      return recv_getOrdersByStatus();
//    }
//
//    public void send_getOrdersByStatus(int status) throws TException
//    {
//      getOrdersByStatus_args args = new getOrdersByStatus_args();
//      args.setStatus(status);
//      sendBase("getOrdersByStatus", args);
//    }
//
//    public List<TOrder> recv_getOrdersByStatus() throws TException
//    {
//      getOrdersByStatus_result result = new getOrdersByStatus_result();
//      receiveBase(result, "getOrdersByStatus");
//      if (result.isSetSuccess()) {
//        return result.success;
//      }
//      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrdersByStatus failed: unknown result");
//    }
//
//  }
//  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
//    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
//      private org.apache.thrift.async.TAsyncClientManager clientManager;
//      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
//      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
//        this.clientManager = clientManager;
//        this.protocolFactory = protocolFactory;
//      }
//      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
//        return new AsyncClient(protocolFactory, clientManager, transport);
//      }
//    }
//
//    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
//      super(protocolFactory, clientManager, transport);
//    }
//
//    public void getOrdersByUserId(int userId, AsyncMethodCallback resultHandler) throws TException {
//      checkReady();
//      getOrdersByUserId_call method_call = new getOrdersByUserId_call(userId, resultHandler, this, ___protocolFactory, ___transport);
//      this.___currentMethod = method_call;
//      ___manager.call(method_call);
//    }
//
//    public static class getOrdersByUserId_call extends org.apache.thrift.async.TAsyncMethodCall {
//      private int userId;
//      public getOrdersByUserId_call(int userId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
//        super(client, protocolFactory, transport, resultHandler, false);
//        this.userId = userId;
//      }
//
//      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
//        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrdersByUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
//        getOrdersByUserId_args args = new getOrdersByUserId_args();
//        args.setUserId(userId);
//        args.write(prot);
//        prot.writeMessageEnd();
//      }
//
//      public List<TOrder> getResult() throws TException {
//        if (getState() != State.RESPONSE_READ) {
//          throw new IllegalStateException("Method call not finished!");
//        }
//        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
//        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
//        return (new Client(prot)).recv_getOrdersByUserId();
//      }
//    }
//
//    public void getOrderByOrderNumber(String orderNumber, AsyncMethodCallback resultHandler) throws TException {
//      checkReady();
//      getOrderByOrderNumber_call method_call = new getOrderByOrderNumber_call(orderNumber, resultHandler, this, ___protocolFactory, ___transport);
//      this.___currentMethod = method_call;
//      ___manager.call(method_call);
//    }
//
//    public static class getOrderByOrderNumber_call extends org.apache.thrift.async.TAsyncMethodCall {
//      private String orderNumber;
//      public getOrderByOrderNumber_call(String orderNumber, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
//        super(client, protocolFactory, transport, resultHandler, false);
//        this.orderNumber = orderNumber;
//      }
//
//      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
//        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrderByOrderNumber", org.apache.thrift.protocol.TMessageType.CALL, 0));
//        getOrderByOrderNumber_args args = new getOrderByOrderNumber_args();
//        args.setOrderNumber(orderNumber);
//        args.write(prot);
//        prot.writeMessageEnd();
//      }
//
//      public TOrder getResult() throws TException {
//        if (getState() != State.RESPONSE_READ) {
//          throw new IllegalStateException("Method call not finished!");
//        }
//        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
//        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
//        return (new Client(prot)).recv_getOrderByOrderNumber();
//      }
//    }
//
//    public void getOrdersByStatus(int status, AsyncMethodCallback resultHandler) throws TException {
//      checkReady();
//      getOrdersByStatus_call method_call = new getOrdersByStatus_call(status, resultHandler, this, ___protocolFactory, ___transport);
//      this.___currentMethod = method_call;
//      ___manager.call(method_call);
//    }
//
//    public static class getOrdersByStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
//      private int status;
//      public getOrdersByStatus_call(int status, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
//        super(client, protocolFactory, transport, resultHandler, false);
//        this.status = status;
//      }
//
//      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
//        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrdersByStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
//        getOrdersByStatus_args args = new getOrdersByStatus_args();
//        args.setStatus(status);
//        args.write(prot);
//        prot.writeMessageEnd();
//      }
//
//      public List<TOrder> getResult() throws TException {
//        if (getState() != State.RESPONSE_READ) {
//          throw new IllegalStateException("Method call not finished!");
//        }
//        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
//        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
//        return (new Client(prot)).recv_getOrdersByStatus();
//      }
//    }
//
//  }
//
//  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
//    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
//    public Processor(I iface) {
//      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
//    }
//
//    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
//      super(iface, getProcessMap(processMap));
//    }
//
//    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
//      processMap.put("getOrdersByUserId", new getOrdersByUserId());
//      processMap.put("getOrderByOrderNumber", new getOrderByOrderNumber());
//      processMap.put("getOrdersByStatus", new getOrdersByStatus());
//      return processMap;
//    }
//
//    public static class getOrdersByUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrdersByUserId_args> {
//      public getOrdersByUserId() {
//        super("getOrdersByUserId");
//      }
//
//      public getOrdersByUserId_args getEmptyArgsInstance() {
//        return new getOrdersByUserId_args();
//      }
//
//      protected boolean isOneway() {
//        return false;
//      }
//
//      public getOrdersByUserId_result getResult(I iface, getOrdersByUserId_args args) throws TException {
//        getOrdersByUserId_result result = new getOrdersByUserId_result();
//        result.success = iface.getOrdersByUserId(args.userId);
//        return result;
//      }
//    }
//
//    public static class getOrderByOrderNumber<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrderByOrderNumber_args> {
//      public getOrderByOrderNumber() {
//        super("getOrderByOrderNumber");
//      }
//
//      public getOrderByOrderNumber_args getEmptyArgsInstance() {
//        return new getOrderByOrderNumber_args();
//      }
//
//      protected boolean isOneway() {
//        return false;
//      }
//
//      public getOrderByOrderNumber_result getResult(I iface, getOrderByOrderNumber_args args) throws TException {
//        getOrderByOrderNumber_result result = new getOrderByOrderNumber_result();
//        result.success = iface.getOrderByOrderNumber(args.orderNumber);
//        return result;
//      }
//    }
//
//    public static class getOrdersByStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrdersByStatus_args> {
//      public getOrdersByStatus() {
//        super("getOrdersByStatus");
//      }
//
//      public getOrdersByStatus_args getEmptyArgsInstance() {
//        return new getOrdersByStatus_args();
//      }
//
//      protected boolean isOneway() {
//        return false;
//      }
//
//      public getOrdersByStatus_result getResult(I iface, getOrdersByStatus_args args) throws TException {
//        getOrdersByStatus_result result = new getOrdersByStatus_result();
//        result.success = iface.getOrdersByStatus(args.status);
//        return result;
//      }
//    }
//
//  }
//
//  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
//    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
//    public AsyncProcessor(I iface) {
//      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
//    }
//
//    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
//      super(iface, getProcessMap(processMap));
//    }
//
//    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
//      processMap.put("getOrdersByUserId", new getOrdersByUserId());
//      processMap.put("getOrderByOrderNumber", new getOrderByOrderNumber());
//      processMap.put("getOrdersByStatus", new getOrdersByStatus());
//      return processMap;
//    }
//
//    public static class getOrdersByUserId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrdersByUserId_args, List<TOrder>> {
//      public getOrdersByUserId() {
//        super("getOrdersByUserId");
//      }
//
//      public getOrdersByUserId_args getEmptyArgsInstance() {
//        return new getOrdersByUserId_args();
//      }
//
//      public AsyncMethodCallback<List<TOrder>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
//        final org.apache.thrift.AsyncProcessFunction fcall = this;
//        return new AsyncMethodCallback<List<TOrder>>() {
//          public void onComplete(List<TOrder> o) {
//            getOrdersByUserId_result result = new getOrdersByUserId_result();
//            result.success = o;
//            try {
//              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
//              return;
//            } catch (Exception e) {
//              LOGGER.error("Exception writing to internal frame buffer", e);
//            }
//            fb.close();
//          }
//          public void onError(Exception e) {
//            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
//            org.apache.thrift.TBase msg;
//            getOrdersByUserId_result result = new getOrdersByUserId_result();
//            {
//              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
//              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
//            }
//            try {
//              fcall.sendResponse(fb,msg,msgType,seqid);
//              return;
//            } catch (Exception ex) {
//              LOGGER.error("Exception writing to internal frame buffer", ex);
//            }
//            fb.close();
//          }
//        };
//      }
//
//      protected boolean isOneway() {
//        return false;
//      }
//
//      public void start(I iface, getOrdersByUserId_args args, AsyncMethodCallback<List<TOrder>> resultHandler) throws TException {
//        iface.getOrdersByUserId(args.userId,resultHandler);
//      }
//    }
//
//    public static class getOrderByOrderNumber<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrderByOrderNumber_args, TOrder> {
//      public getOrderByOrderNumber() {
//        super("getOrderByOrderNumber");
//      }
//
//      public getOrderByOrderNumber_args getEmptyArgsInstance() {
//        return new getOrderByOrderNumber_args();
//      }
//
//      public AsyncMethodCallback<TOrder> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
//        final org.apache.thrift.AsyncProcessFunction fcall = this;
//        return new AsyncMethodCallback<TOrder>() {
//          public void onComplete(TOrder o) {
//            getOrderByOrderNumber_result result = new getOrderByOrderNumber_result();
//            result.success = o;
//            try {
//              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
//              return;
//            } catch (Exception e) {
//              LOGGER.error("Exception writing to internal frame buffer", e);
//            }
//            fb.close();
//          }
//          public void onError(Exception e) {
//            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
//            org.apache.thrift.TBase msg;
//            getOrderByOrderNumber_result result = new getOrderByOrderNumber_result();
//            {
//              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
//              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
//            }
//            try {
//              fcall.sendResponse(fb,msg,msgType,seqid);
//              return;
//            } catch (Exception ex) {
//              LOGGER.error("Exception writing to internal frame buffer", ex);
//            }
//            fb.close();
//          }
//        };
//      }
//
//      protected boolean isOneway() {
//        return false;
//      }
//
//      public void start(I iface, getOrderByOrderNumber_args args, AsyncMethodCallback<TOrder> resultHandler) throws TException {
//        iface.getOrderByOrderNumber(args.orderNumber,resultHandler);
//      }
//    }
//
//    public static class getOrdersByStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrdersByStatus_args, List<TOrder>> {
//      public getOrdersByStatus() {
//        super("getOrdersByStatus");
//      }
//
//      public getOrdersByStatus_args getEmptyArgsInstance() {
//        return new getOrdersByStatus_args();
//      }
//
//      public AsyncMethodCallback<List<TOrder>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
//        final org.apache.thrift.AsyncProcessFunction fcall = this;
//        return new AsyncMethodCallback<List<TOrder>>() {
//          public void onComplete(List<TOrder> o) {
//            getOrdersByStatus_result result = new getOrdersByStatus_result();
//            result.success = o;
//            try {
//              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
//              return;
//            } catch (Exception e) {
//              LOGGER.error("Exception writing to internal frame buffer", e);
//            }
//            fb.close();
//          }
//          public void onError(Exception e) {
//            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
//            org.apache.thrift.TBase msg;
//            getOrdersByStatus_result result = new getOrdersByStatus_result();
//            {
//              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
//              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
//            }
//            try {
//              fcall.sendResponse(fb,msg,msgType,seqid);
//              return;
//            } catch (Exception ex) {
//              LOGGER.error("Exception writing to internal frame buffer", ex);
//            }
//            fb.close();
//          }
//        };
//      }
//
//      protected boolean isOneway() {
//        return false;
//      }
//
//      public void start(I iface, getOrdersByStatus_args args, AsyncMethodCallback<List<TOrder>> resultHandler) throws TException {
//        iface.getOrdersByStatus(args.status,resultHandler);
//      }
//    }
//
//  }
//
//  public static class getOrdersByUserId_args implements org.apache.thrift.TBase<getOrdersByUserId_args, getOrdersByUserId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrdersByUserId_args>   {
//    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrdersByUserId_args");
//
//    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
//
//    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
//    static {
//      schemes.put(StandardScheme.class, new getOrdersByUserId_argsStandardSchemeFactory());
//      schemes.put(TupleScheme.class, new getOrdersByUserId_argsTupleSchemeFactory());
//    }
//
//    public int userId; // required
//
//    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
//    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
//      USER_ID((short)1, "userId");
//
//      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
//
//      static {
//        for (_Fields field : EnumSet.allOf(_Fields.class)) {
//          byName.put(field.getFieldName(), field);
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, or null if its not found.
//       */
//      public static _Fields findByThriftId(int fieldId) {
//        switch(fieldId) {
//          case 1: // USER_ID
//            return USER_ID;
//          default:
//            return null;
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, throwing an exception
//       * if it is not found.
//       */
//      public static _Fields findByThriftIdOrThrow(int fieldId) {
//        _Fields fields = findByThriftId(fieldId);
//        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
//        return fields;
//      }
//
//      /**
//       * Find the _Fields constant that matches name, or null if its not found.
//       */
//      public static _Fields findByName(String name) {
//        return byName.get(name);
//      }
//
//      private final short _thriftId;
//      private final String _fieldName;
//
//      _Fields(short thriftId, String fieldName) {
//        _thriftId = thriftId;
//        _fieldName = fieldName;
//      }
//
//      public short getThriftFieldId() {
//        return _thriftId;
//      }
//
//      public String getFieldName() {
//        return _fieldName;
//      }
//    }
//
//    // isset id assignments
//    private static final int __USERID_ISSET_ID = 0;
//    private byte __isset_bitfield = 0;
//    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
//    static {
//      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
//      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
//          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
//      metaDataMap = Collections.unmodifiableMap(tmpMap);
//      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrdersByUserId_args.class, metaDataMap);
//    }
//
//    public getOrdersByUserId_args() {
//    }
//
//    public getOrdersByUserId_args(
//      int userId)
//    {
//      this();
//      this.userId = userId;
//      setUserIdIsSet(true);
//    }
//
//    /**
//     * Performs a deep copy on <i>other</i>.
//     */
//    public getOrdersByUserId_args(getOrdersByUserId_args other) {
//      __isset_bitfield = other.__isset_bitfield;
//      this.userId = other.userId;
//    }
//
//    public getOrdersByUserId_args deepCopy() {
//      return new getOrdersByUserId_args(this);
//    }
//
//    @Override
//    public void clear() {
//      setUserIdIsSet(false);
//      this.userId = 0;
//    }
//
//    public int getUserId() {
//      return this.userId;
//    }
//
//    public getOrdersByUserId_args setUserId(int userId) {
//      this.userId = userId;
//      setUserIdIsSet(true);
//      return this;
//    }
//
//    public void unsetUserId() {
//      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
//    }
//
//    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
//    public boolean isSetUserId() {
//      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
//    }
//
//    public void setUserIdIsSet(boolean value) {
//      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
//    }
//
//    public void setFieldValue(_Fields field, Object value) {
//      switch (field) {
//      case USER_ID:
//        if (value == null) {
//          unsetUserId();
//        } else {
//          setUserId((Integer)value);
//        }
//        break;
//
//      }
//    }
//
//    public Object getFieldValue(_Fields field) {
//      switch (field) {
//      case USER_ID:
//        return getUserId();
//
//      }
//      throw new IllegalStateException();
//    }
//
//    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
//    public boolean isSet(_Fields field) {
//      if (field == null) {
//        throw new IllegalArgumentException();
//      }
//
//      switch (field) {
//      case USER_ID:
//        return isSetUserId();
//      }
//      throw new IllegalStateException();
//    }
//
//    @Override
//    public boolean equals(Object that) {
//      if (that == null)
//        return false;
//      if (that instanceof getOrdersByUserId_args)
//        return this.equals((getOrdersByUserId_args)that);
//      return false;
//    }
//
//    public boolean equals(getOrdersByUserId_args that) {
//      if (that == null)
//        return false;
//
//      boolean this_present_userId = true;
//      boolean that_present_userId = true;
//      if (this_present_userId || that_present_userId) {
//        if (!(this_present_userId && that_present_userId))
//          return false;
//        if (this.userId != that.userId)
//          return false;
//      }
//
//      return true;
//    }
//
//    @Override
//    public int hashCode() {
//      List<Object> list = new ArrayList<Object>();
//
//      boolean present_userId = true;
//      list.add(present_userId);
//      if (present_userId)
//        list.add(userId);
//
//      return list.hashCode();
//    }
//
//    @Override
//    public int compareTo(getOrdersByUserId_args other) {
//      if (!getClass().equals(other.getClass())) {
//        return getClass().getName().compareTo(other.getClass().getName());
//      }
//
//      int lastComparison = 0;
//
//      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//      if (isSetUserId()) {
//        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
//        if (lastComparison != 0) {
//          return lastComparison;
//        }
//      }
//      return 0;
//    }
//
//    public _Fields fieldForId(int fieldId) {
//      return _Fields.findByThriftId(fieldId);
//    }
//
//    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
//      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
//    }
//
//    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
//      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
//    }
//
//    @Override
//    public String toString() {
//      StringBuilder sb = new StringBuilder("getOrdersByUserId_args(");
//      boolean first = true;
//
//      sb.append("userId:");
//      sb.append(this.userId);
//      first = false;
//      sb.append(")");
//      return sb.toString();
//    }
//
//    public void validate() throws TException {
//      // check for required fields
//      // check for sub-struct validity
//    }
//
//    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
//      try {
//        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
//      } catch (TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
//      try {
//        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
//        __isset_bitfield = 0;
//        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
//      } catch (TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private static class getOrdersByUserId_argsStandardSchemeFactory implements SchemeFactory {
//      public getOrdersByUserId_argsStandardScheme getScheme() {
//        return new getOrdersByUserId_argsStandardScheme();
//      }
//    }
//
//    private static class getOrdersByUserId_argsStandardScheme extends StandardScheme<getOrdersByUserId_args> {
//
//      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrdersByUserId_args struct) throws TException {
//        org.apache.thrift.protocol.TField schemeField;
//        iprot.readStructBegin();
//        while (true)
//        {
//          schemeField = iprot.readFieldBegin();
//          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
//            break;
//          }
//          switch (schemeField.id) {
//            case 1: // USER_ID
//              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
//                struct.userId = iprot.readI32();
//                struct.setUserIdIsSet(true);
//              } else {
//                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//              }
//              break;
//            default:
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//          }
//          iprot.readFieldEnd();
//        }
//        iprot.readStructEnd();
//
//        // check for required fields of primitive type, which can't be checked in the validate method
//        struct.validate();
//      }
//
//      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrdersByUserId_args struct) throws TException {
//        struct.validate();
//
//        oprot.writeStructBegin(STRUCT_DESC);
//        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
//        oprot.writeI32(struct.userId);
//        oprot.writeFieldEnd();
//        oprot.writeFieldStop();
//        oprot.writeStructEnd();
//      }
//
//    }
//
//    private static class getOrdersByUserId_argsTupleSchemeFactory implements SchemeFactory {
//      public getOrdersByUserId_argsTupleScheme getScheme() {
//        return new getOrdersByUserId_argsTupleScheme();
//      }
//    }
//
//    private static class getOrdersByUserId_argsTupleScheme extends TupleScheme<getOrdersByUserId_args> {
//
//      @Override
//      public void write(org.apache.thrift.protocol.TProtocol prot, getOrdersByUserId_args struct) throws TException {
//        TTupleProtocol oprot = (TTupleProtocol) prot;
//        BitSet optionals = new BitSet();
//        if (struct.isSetUserId()) {
//          optionals.set(0);
//        }
//        oprot.writeBitSet(optionals, 1);
//        if (struct.isSetUserId()) {
//          oprot.writeI32(struct.userId);
//        }
//      }
//
//      @Override
//      public void read(org.apache.thrift.protocol.TProtocol prot, getOrdersByUserId_args struct) throws TException {
//        TTupleProtocol iprot = (TTupleProtocol) prot;
//        BitSet incoming = iprot.readBitSet(1);
//        if (incoming.get(0)) {
//          struct.userId = iprot.readI32();
//          struct.setUserIdIsSet(true);
//        }
//      }
//    }
//
//  }
//
//  public static class getOrdersByUserId_result implements org.apache.thrift.TBase<getOrdersByUserId_result, getOrdersByUserId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrdersByUserId_result>   {
//    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrdersByUserId_result");
//
//    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
//
//    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
//    static {
//      schemes.put(StandardScheme.class, new getOrdersByUserId_resultStandardSchemeFactory());
//      schemes.put(TupleScheme.class, new getOrdersByUserId_resultTupleSchemeFactory());
//    }
//
//    public List<TOrder> success; // required
//
//    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
//    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
//      SUCCESS((short)0, "success");
//
//      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
//
//      static {
//        for (_Fields field : EnumSet.allOf(_Fields.class)) {
//          byName.put(field.getFieldName(), field);
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, or null if its not found.
//       */
//      public static _Fields findByThriftId(int fieldId) {
//        switch(fieldId) {
//          case 0: // SUCCESS
//            return SUCCESS;
//          default:
//            return null;
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, throwing an exception
//       * if it is not found.
//       */
//      public static _Fields findByThriftIdOrThrow(int fieldId) {
//        _Fields fields = findByThriftId(fieldId);
//        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
//        return fields;
//      }
//
//      /**
//       * Find the _Fields constant that matches name, or null if its not found.
//       */
//      public static _Fields findByName(String name) {
//        return byName.get(name);
//      }
//
//      private final short _thriftId;
//      private final String _fieldName;
//
//      _Fields(short thriftId, String fieldName) {
//        _thriftId = thriftId;
//        _fieldName = fieldName;
//      }
//
//      public short getThriftFieldId() {
//        return _thriftId;
//      }
//
//      public String getFieldName() {
//        return _fieldName;
//      }
//    }
//
//    // isset id assignments
//    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
//    static {
//      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
//      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
//          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
//              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOrder.class))));
//      metaDataMap = Collections.unmodifiableMap(tmpMap);
//      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrdersByUserId_result.class, metaDataMap);
//    }
//
//    public getOrdersByUserId_result() {
//    }
//
//    public getOrdersByUserId_result(
//      List<TOrder> success)
//    {
//      this();
//      this.success = success;
//    }
//
//    /**
//     * Performs a deep copy on <i>other</i>.
//     */
//    public getOrdersByUserId_result(getOrdersByUserId_result other) {
//      if (other.isSetSuccess()) {
//        List<TOrder> __this__success = new ArrayList<TOrder>(other.success.size());
//        for (TOrder other_element : other.success) {
//          __this__success.add(new TOrder(other_element));
//        }
//        this.success = __this__success;
//      }
//    }
//
//    public getOrdersByUserId_result deepCopy() {
//      return new getOrdersByUserId_result(this);
//    }
//
//    @Override
//    public void clear() {
//      this.success = null;
//    }
//
//    public int getSuccessSize() {
//      return (this.success == null) ? 0 : this.success.size();
//    }
//
//    public java.util.Iterator<TOrder> getSuccessIterator() {
//      return (this.success == null) ? null : this.success.iterator();
//    }
//
//    public void addToSuccess(TOrder elem) {
//      if (this.success == null) {
//        this.success = new ArrayList<TOrder>();
//      }
//      this.success.add(elem);
//    }
//
//    public List<TOrder> getSuccess() {
//      return this.success;
//    }
//
//    public getOrdersByUserId_result setSuccess(List<TOrder> success) {
//      this.success = success;
//      return this;
//    }
//
//    public void unsetSuccess() {
//      this.success = null;
//    }
//
//    /** Returns true if field success is set (has been assigned a value) and false otherwise */
//    public boolean isSetSuccess() {
//      return this.success != null;
//    }
//
//    public void setSuccessIsSet(boolean value) {
//      if (!value) {
//        this.success = null;
//      }
//    }
//
//    public void setFieldValue(_Fields field, Object value) {
//      switch (field) {
//      case SUCCESS:
//        if (value == null) {
//          unsetSuccess();
//        } else {
//          setSuccess((List<TOrder>)value);
//        }
//        break;
//
//      }
//    }
//
//    public Object getFieldValue(_Fields field) {
//      switch (field) {
//      case SUCCESS:
//        return getSuccess();
//
//      }
//      throw new IllegalStateException();
//    }
//
//    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
//    public boolean isSet(_Fields field) {
//      if (field == null) {
//        throw new IllegalArgumentException();
//      }
//
//      switch (field) {
//      case SUCCESS:
//        return isSetSuccess();
//      }
//      throw new IllegalStateException();
//    }
//
//    @Override
//    public boolean equals(Object that) {
//      if (that == null)
//        return false;
//      if (that instanceof getOrdersByUserId_result)
//        return this.equals((getOrdersByUserId_result)that);
//      return false;
//    }
//
//    public boolean equals(getOrdersByUserId_result that) {
//      if (that == null)
//        return false;
//
//      boolean this_present_success = true && this.isSetSuccess();
//      boolean that_present_success = true && that.isSetSuccess();
//      if (this_present_success || that_present_success) {
//        if (!(this_present_success && that_present_success))
//          return false;
//        if (!this.success.equals(that.success))
//          return false;
//      }
//
//      return true;
//    }
//
//    @Override
//    public int hashCode() {
//      List<Object> list = new ArrayList<Object>();
//
//      boolean present_success = true && (isSetSuccess());
//      list.add(present_success);
//      if (present_success)
//        list.add(success);
//
//      return list.hashCode();
//    }
//
//    @Override
//    public int compareTo(getOrdersByUserId_result other) {
//      if (!getClass().equals(other.getClass())) {
//        return getClass().getName().compareTo(other.getClass().getName());
//      }
//
//      int lastComparison = 0;
//
//      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//      if (isSetSuccess()) {
//        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
//        if (lastComparison != 0) {
//          return lastComparison;
//        }
//      }
//      return 0;
//    }
//
//    public _Fields fieldForId(int fieldId) {
//      return _Fields.findByThriftId(fieldId);
//    }
//
//    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
//      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
//    }
//
//    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
//      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
//      }
//
//    @Override
//    public String toString() {
//      StringBuilder sb = new StringBuilder("getOrdersByUserId_result(");
//      boolean first = true;
//
//      sb.append("success:");
//      if (this.success == null) {
//        sb.append("null");
//      } else {
//        sb.append(this.success);
//      }
//      first = false;
//      sb.append(")");
//      return sb.toString();
//    }
//
//    public void validate() throws TException {
//      // check for required fields
//      // check for sub-struct validity
//    }
//
//    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
//      try {
//        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
//      } catch (TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
//      try {
//        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
//      } catch (TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private static class getOrdersByUserId_resultStandardSchemeFactory implements SchemeFactory {
//      public getOrdersByUserId_resultStandardScheme getScheme() {
//        return new getOrdersByUserId_resultStandardScheme();
//      }
//    }
//
//    private static class getOrdersByUserId_resultStandardScheme extends StandardScheme<getOrdersByUserId_result> {
//
//      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrdersByUserId_result struct) throws TException {
//        org.apache.thrift.protocol.TField schemeField;
//        iprot.readStructBegin();
//        while (true)
//        {
//          schemeField = iprot.readFieldBegin();
//          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
//            break;
//          }
//          switch (schemeField.id) {
//            case 0: // SUCCESS
//              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
//                {
//                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
//                  struct.success = new ArrayList<TOrder>(_list0.size);
//                  TOrder _elem1;
//                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
//                  {
//                    _elem1 = new TOrder();
//                    _elem1.read(iprot);
//                    struct.success.add(_elem1);
//                  }
//                  iprot.readListEnd();
//                }
//                struct.setSuccessIsSet(true);
//              } else {
//                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//              }
//              break;
//            default:
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//          }
//          iprot.readFieldEnd();
//        }
//        iprot.readStructEnd();
//
//        // check for required fields of primitive type, which can't be checked in the validate method
//        struct.validate();
//      }
//
//      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrdersByUserId_result struct) throws TException {
//        struct.validate();
//
//        oprot.writeStructBegin(STRUCT_DESC);
//        if (struct.success != null) {
//          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
//          {
//            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
//            for (TOrder _iter3 : struct.success)
//            {
//              _iter3.write(oprot);
//            }
//            oprot.writeListEnd();
//          }
//          oprot.writeFieldEnd();
//        }
//        oprot.writeFieldStop();
//        oprot.writeStructEnd();
//      }
//
//    }
//
//    private static class getOrdersByUserId_resultTupleSchemeFactory implements SchemeFactory {
//      public getOrdersByUserId_resultTupleScheme getScheme() {
//        return new getOrdersByUserId_resultTupleScheme();
//      }
//    }
//
//    private static class getOrdersByUserId_resultTupleScheme extends TupleScheme<getOrdersByUserId_result> {
//
//      @Override
//      public void write(org.apache.thrift.protocol.TProtocol prot, getOrdersByUserId_result struct) throws TException {
//        TTupleProtocol oprot = (TTupleProtocol) prot;
//        BitSet optionals = new BitSet();
//        if (struct.isSetSuccess()) {
//          optionals.set(0);
//        }
//        oprot.writeBitSet(optionals, 1);
//        if (struct.isSetSuccess()) {
//          {
//            oprot.writeI32(struct.success.size());
//            for (TOrder _iter4 : struct.success)
//            {
//              _iter4.write(oprot);
//            }
//          }
//        }
//      }
//
//      @Override
//      public void read(org.apache.thrift.protocol.TProtocol prot, getOrdersByUserId_result struct) throws TException {
//        TTupleProtocol iprot = (TTupleProtocol) prot;
//        BitSet incoming = iprot.readBitSet(1);
//        if (incoming.get(0)) {
//          {
//            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
//            struct.success = new ArrayList<TOrder>(_list5.size);
//            TOrder _elem6;
//            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
//            {
//              _elem6 = new TOrder();
//              _elem6.read(iprot);
//              struct.success.add(_elem6);
//            }
//          }
//          struct.setSuccessIsSet(true);
//        }
//      }
//    }
//
//  }
//
//  public static class getOrderByOrderNumber_args implements org.apache.thrift.TBase<getOrderByOrderNumber_args, getOrderByOrderNumber_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrderByOrderNumber_args>   {
//    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrderByOrderNumber_args");
//
//    private static final org.apache.thrift.protocol.TField ORDER_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNumber", org.apache.thrift.protocol.TType.STRING, (short)1);
//
//    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
//    static {
//      schemes.put(StandardScheme.class, new getOrderByOrderNumber_argsStandardSchemeFactory());
//      schemes.put(TupleScheme.class, new getOrderByOrderNumber_argsTupleSchemeFactory());
//    }
//
//    public String orderNumber; // required
//
//    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
//    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
//      ORDER_NUMBER((short)1, "orderNumber");
//
//      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
//
//      static {
//        for (_Fields field : EnumSet.allOf(_Fields.class)) {
//          byName.put(field.getFieldName(), field);
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, or null if its not found.
//       */
//      public static _Fields findByThriftId(int fieldId) {
//        switch(fieldId) {
//          case 1: // ORDER_NUMBER
//            return ORDER_NUMBER;
//          default:
//            return null;
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, throwing an exception
//       * if it is not found.
//       */
//      public static _Fields findByThriftIdOrThrow(int fieldId) {
//        _Fields fields = findByThriftId(fieldId);
//        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
//        return fields;
//      }
//
//      /**
//       * Find the _Fields constant that matches name, or null if its not found.
//       */
//      public static _Fields findByName(String name) {
//        return byName.get(name);
//      }
//
//      private final short _thriftId;
//      private final String _fieldName;
//
//      _Fields(short thriftId, String fieldName) {
//        _thriftId = thriftId;
//        _fieldName = fieldName;
//      }
//
//      public short getThriftFieldId() {
//        return _thriftId;
//      }
//
//      public String getFieldName() {
//        return _fieldName;
//      }
//    }
//
//    // isset id assignments
//    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
//    static {
//      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
//      tmpMap.put(_Fields.ORDER_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("orderNumber", org.apache.thrift.TFieldRequirementType.DEFAULT,
//          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
//      metaDataMap = Collections.unmodifiableMap(tmpMap);
//      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderByOrderNumber_args.class, metaDataMap);
//    }
//
//    public getOrderByOrderNumber_args() {
//    }
//
//    public getOrderByOrderNumber_args(
//      String orderNumber)
//    {
//      this();
//      this.orderNumber = orderNumber;
//    }
//
//    /**
//     * Performs a deep copy on <i>other</i>.
//     */
//    public getOrderByOrderNumber_args(getOrderByOrderNumber_args other) {
//      if (other.isSetOrderNumber()) {
//        this.orderNumber = other.orderNumber;
//      }
//    }
//
//    public getOrderByOrderNumber_args deepCopy() {
//      return new getOrderByOrderNumber_args(this);
//    }
//
//    @Override
//    public void clear() {
//      this.orderNumber = null;
//    }
//
//    public String getOrderNumber() {
//      return this.orderNumber;
//    }
//
//    public getOrderByOrderNumber_args setOrderNumber(String orderNumber) {
//      this.orderNumber = orderNumber;
//      return this;
//    }
//
//    public void unsetOrderNumber() {
//      this.orderNumber = null;
//    }
//
//    /** Returns true if field orderNumber is set (has been assigned a value) and false otherwise */
//    public boolean isSetOrderNumber() {
//      return this.orderNumber != null;
//    }
//
//    public void setOrderNumberIsSet(boolean value) {
//      if (!value) {
//        this.orderNumber = null;
//      }
//    }
//
//    public void setFieldValue(_Fields field, Object value) {
//      switch (field) {
//      case ORDER_NUMBER:
//        if (value == null) {
//          unsetOrderNumber();
//        } else {
//          setOrderNumber((String)value);
//        }
//        break;
//
//      }
//    }
//
//    public Object getFieldValue(_Fields field) {
//      switch (field) {
//      case ORDER_NUMBER:
//        return getOrderNumber();
//
//      }
//      throw new IllegalStateException();
//    }
//
//    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
//    public boolean isSet(_Fields field) {
//      if (field == null) {
//        throw new IllegalArgumentException();
//      }
//
//      switch (field) {
//      case ORDER_NUMBER:
//        return isSetOrderNumber();
//      }
//      throw new IllegalStateException();
//    }
//
//    @Override
//    public boolean equals(Object that) {
//      if (that == null)
//        return false;
//      if (that instanceof getOrderByOrderNumber_args)
//        return this.equals((getOrderByOrderNumber_args)that);
//      return false;
//    }
//
//    public boolean equals(getOrderByOrderNumber_args that) {
//      if (that == null)
//        return false;
//
//      boolean this_present_orderNumber = true && this.isSetOrderNumber();
//      boolean that_present_orderNumber = true && that.isSetOrderNumber();
//      if (this_present_orderNumber || that_present_orderNumber) {
//        if (!(this_present_orderNumber && that_present_orderNumber))
//          return false;
//        if (!this.orderNumber.equals(that.orderNumber))
//          return false;
//      }
//
//      return true;
//    }
//
//    @Override
//    public int hashCode() {
//      List<Object> list = new ArrayList<Object>();
//
//      boolean present_orderNumber = true && (isSetOrderNumber());
//      list.add(present_orderNumber);
//      if (present_orderNumber)
//        list.add(orderNumber);
//
//      return list.hashCode();
//    }
//
//    @Override
//    public int compareTo(getOrderByOrderNumber_args other) {
//      if (!getClass().equals(other.getClass())) {
//        return getClass().getName().compareTo(other.getClass().getName());
//      }
//
//      int lastComparison = 0;
//
//      lastComparison = Boolean.valueOf(isSetOrderNumber()).compareTo(other.isSetOrderNumber());
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//      if (isSetOrderNumber()) {
//        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNumber, other.orderNumber);
//        if (lastComparison != 0) {
//          return lastComparison;
//        }
//      }
//      return 0;
//    }
//
//    public _Fields fieldForId(int fieldId) {
//      return _Fields.findByThriftId(fieldId);
//    }
//
//    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
//      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
//    }
//
//    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
//      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
//    }
//
//    @Override
//    public String toString() {
//      StringBuilder sb = new StringBuilder("getOrderByOrderNumber_args(");
//      boolean first = true;
//
//      sb.append("orderNumber:");
//      if (this.orderNumber == null) {
//        sb.append("null");
//      } else {
//        sb.append(this.orderNumber);
//      }
//      first = false;
//      sb.append(")");
//      return sb.toString();
//    }
//
//    public void validate() throws TException {
//      // check for required fields
//      // check for sub-struct validity
//    }
//
//    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
//      try {
//        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
//      } catch (TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
//      try {
//        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
//      } catch (TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private static class getOrderByOrderNumber_argsStandardSchemeFactory implements SchemeFactory {
//      public getOrderByOrderNumber_argsStandardScheme getScheme() {
//        return new getOrderByOrderNumber_argsStandardScheme();
//      }
//    }
//
//    private static class getOrderByOrderNumber_argsStandardScheme extends StandardScheme<getOrderByOrderNumber_args> {
//
//      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderByOrderNumber_args struct) throws TException {
//        org.apache.thrift.protocol.TField schemeField;
//        iprot.readStructBegin();
//        while (true)
//        {
//          schemeField = iprot.readFieldBegin();
//          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
//            break;
//          }
//          switch (schemeField.id) {
//            case 1: // ORDER_NUMBER
//              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
//                struct.orderNumber = iprot.readString();
//                struct.setOrderNumberIsSet(true);
//              } else {
//                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//              }
//              break;
//            default:
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//          }
//          iprot.readFieldEnd();
//        }
//        iprot.readStructEnd();
//
//        // check for required fields of primitive type, which can't be checked in the validate method
//        struct.validate();
//      }
//
//      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderByOrderNumber_args struct) throws TException {
//        struct.validate();
//
//        oprot.writeStructBegin(STRUCT_DESC);
//        if (struct.orderNumber != null) {
//          oprot.writeFieldBegin(ORDER_NUMBER_FIELD_DESC);
//          oprot.writeString(struct.orderNumber);
//          oprot.writeFieldEnd();
//        }
//        oprot.writeFieldStop();
//        oprot.writeStructEnd();
//      }
//
//    }
//
//    private static class getOrderByOrderNumber_argsTupleSchemeFactory implements SchemeFactory {
//      public getOrderByOrderNumber_argsTupleScheme getScheme() {
//        return new getOrderByOrderNumber_argsTupleScheme();
//      }
//    }
//
//    private static class getOrderByOrderNumber_argsTupleScheme extends TupleScheme<getOrderByOrderNumber_args> {
//
//      @Override
//      public void write(org.apache.thrift.protocol.TProtocol prot, getOrderByOrderNumber_args struct) throws TException {
//        TTupleProtocol oprot = (TTupleProtocol) prot;
//        BitSet optionals = new BitSet();
//        if (struct.isSetOrderNumber()) {
//          optionals.set(0);
//        }
//        oprot.writeBitSet(optionals, 1);
//        if (struct.isSetOrderNumber()) {
//          oprot.writeString(struct.orderNumber);
//        }
//      }
//
//      @Override
//      public void read(org.apache.thrift.protocol.TProtocol prot, getOrderByOrderNumber_args struct) throws TException {
//        TTupleProtocol iprot = (TTupleProtocol) prot;
//        BitSet incoming = iprot.readBitSet(1);
//        if (incoming.get(0)) {
//          struct.orderNumber = iprot.readString();
//          struct.setOrderNumberIsSet(true);
//        }
//      }
//    }
//
//  }
//
//  public static class getOrderByOrderNumber_result implements org.apache.thrift.TBase<getOrderByOrderNumber_result, getOrderByOrderNumber_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrderByOrderNumber_result>   {
//    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrderByOrderNumber_result");
//
//    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
//
//    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
//    static {
//      schemes.put(StandardScheme.class, new getOrderByOrderNumber_resultStandardSchemeFactory());
//      schemes.put(TupleScheme.class, new getOrderByOrderNumber_resultTupleSchemeFactory());
//    }
//
//    public TOrder success; // required
//
//    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
//    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
//      SUCCESS((short)0, "success");
//
//      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
//
//      static {
//        for (_Fields field : EnumSet.allOf(_Fields.class)) {
//          byName.put(field.getFieldName(), field);
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, or null if its not found.
//       */
//      public static _Fields findByThriftId(int fieldId) {
//        switch(fieldId) {
//          case 0: // SUCCESS
//            return SUCCESS;
//          default:
//            return null;
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, throwing an exception
//       * if it is not found.
//       */
//      public static _Fields findByThriftIdOrThrow(int fieldId) {
//        _Fields fields = findByThriftId(fieldId);
//        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
//        return fields;
//      }
//
//      /**
//       * Find the _Fields constant that matches name, or null if its not found.
//       */
//      public static _Fields findByName(String name) {
//        return byName.get(name);
//      }
//
//      private final short _thriftId;
//      private final String _fieldName;
//
//      _Fields(short thriftId, String fieldName) {
//        _thriftId = thriftId;
//        _fieldName = fieldName;
//      }
//
//      public short getThriftFieldId() {
//        return _thriftId;
//      }
//
//      public String getFieldName() {
//        return _fieldName;
//      }
//    }
//
//    // isset id assignments
//    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
//    static {
//      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
//      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
//          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOrder.class)));
//      metaDataMap = Collections.unmodifiableMap(tmpMap);
//      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderByOrderNumber_result.class, metaDataMap);
//    }
//
//    public getOrderByOrderNumber_result() {
//    }
//
//    public getOrderByOrderNumber_result(
//      TOrder success)
//    {
//      this();
//      this.success = success;
//    }
//
//    /**
//     * Performs a deep copy on <i>other</i>.
//     */
//    public getOrderByOrderNumber_result(getOrderByOrderNumber_result other) {
//      if (other.isSetSuccess()) {
//        this.success = new TOrder(other.success);
//      }
//    }
//
//    public getOrderByOrderNumber_result deepCopy() {
//      return new getOrderByOrderNumber_result(this);
//    }
//
//    @Override
//    public void clear() {
//      this.success = null;
//    }
//
//    public TOrder getSuccess() {
//      return this.success;
//    }
//
//    public getOrderByOrderNumber_result setSuccess(TOrder success) {
//      this.success = success;
//      return this;
//    }
//
//    public void unsetSuccess() {
//      this.success = null;
//    }
//
//    /** Returns true if field success is set (has been assigned a value) and false otherwise */
//    public boolean isSetSuccess() {
//      return this.success != null;
//    }
//
//    public void setSuccessIsSet(boolean value) {
//      if (!value) {
//        this.success = null;
//      }
//    }
//
//    public void setFieldValue(_Fields field, Object value) {
//      switch (field) {
//      case SUCCESS:
//        if (value == null) {
//          unsetSuccess();
//        } else {
//          setSuccess((TOrder)value);
//        }
//        break;
//
//      }
//    }
//
//    public Object getFieldValue(_Fields field) {
//      switch (field) {
//      case SUCCESS:
//        return getSuccess();
//
//      }
//      throw new IllegalStateException();
//    }
//
//    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
//    public boolean isSet(_Fields field) {
//      if (field == null) {
//        throw new IllegalArgumentException();
//      }
//
//      switch (field) {
//      case SUCCESS:
//        return isSetSuccess();
//      }
//      throw new IllegalStateException();
//    }
//
//    @Override
//    public boolean equals(Object that) {
//      if (that == null)
//        return false;
//      if (that instanceof getOrderByOrderNumber_result)
//        return this.equals((getOrderByOrderNumber_result)that);
//      return false;
//    }
//
//    public boolean equals(getOrderByOrderNumber_result that) {
//      if (that == null)
//        return false;
//
//      boolean this_present_success = true && this.isSetSuccess();
//      boolean that_present_success = true && that.isSetSuccess();
//      if (this_present_success || that_present_success) {
//        if (!(this_present_success && that_present_success))
//          return false;
//        if (!this.success.equals(that.success))
//          return false;
//      }
//
//      return true;
//    }
//
//    @Override
//    public int hashCode() {
//      List<Object> list = new ArrayList<Object>();
//
//      boolean present_success = true && (isSetSuccess());
//      list.add(present_success);
//      if (present_success)
//        list.add(success);
//
//      return list.hashCode();
//    }
//
//    @Override
//    public int compareTo(getOrderByOrderNumber_result other) {
//      if (!getClass().equals(other.getClass())) {
//        return getClass().getName().compareTo(other.getClass().getName());
//      }
//
//      int lastComparison = 0;
//
//      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//      if (isSetSuccess()) {
//        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
//        if (lastComparison != 0) {
//          return lastComparison;
//        }
//      }
//      return 0;
//    }
//
//    public _Fields fieldForId(int fieldId) {
//      return _Fields.findByThriftId(fieldId);
//    }
//
//    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
//      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
//    }
//
//    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
//      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
//      }
//
//    @Override
//    public String toString() {
//      StringBuilder sb = new StringBuilder("getOrderByOrderNumber_result(");
//      boolean first = true;
//
//      sb.append("success:");
//      if (this.success == null) {
//        sb.append("null");
//      } else {
//        sb.append(this.success);
//      }
//      first = false;
//      sb.append(")");
//      return sb.toString();
//    }
//
//    public void validate() throws TException {
//      // check for required fields
//      // check for sub-struct validity
//      if (success != null) {
//        success.validate();
//      }
//    }
//
//    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
//      try {
//        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
//      } catch (TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
//      try {
//        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
//      } catch (TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private static class getOrderByOrderNumber_resultStandardSchemeFactory implements SchemeFactory {
//      public getOrderByOrderNumber_resultStandardScheme getScheme() {
//        return new getOrderByOrderNumber_resultStandardScheme();
//      }
//    }
//
//    private static class getOrderByOrderNumber_resultStandardScheme extends StandardScheme<getOrderByOrderNumber_result> {
//
//      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderByOrderNumber_result struct) throws TException {
//        org.apache.thrift.protocol.TField schemeField;
//        iprot.readStructBegin();
//        while (true)
//        {
//          schemeField = iprot.readFieldBegin();
//          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
//            break;
//          }
//          switch (schemeField.id) {
//            case 0: // SUCCESS
//              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
//                struct.success = new TOrder();
//                struct.success.read(iprot);
//                struct.setSuccessIsSet(true);
//              } else {
//                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//              }
//              break;
//            default:
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//          }
//          iprot.readFieldEnd();
//        }
//        iprot.readStructEnd();
//
//        // check for required fields of primitive type, which can't be checked in the validate method
//        struct.validate();
//      }
//
//      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderByOrderNumber_result struct) throws TException {
//        struct.validate();
//
//        oprot.writeStructBegin(STRUCT_DESC);
//        if (struct.success != null) {
//          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
//          struct.success.write(oprot);
//          oprot.writeFieldEnd();
//        }
//        oprot.writeFieldStop();
//        oprot.writeStructEnd();
//      }
//
//    }
//
//    private static class getOrderByOrderNumber_resultTupleSchemeFactory implements SchemeFactory {
//      public getOrderByOrderNumber_resultTupleScheme getScheme() {
//        return new getOrderByOrderNumber_resultTupleScheme();
//      }
//    }
//
//    private static class getOrderByOrderNumber_resultTupleScheme extends TupleScheme<getOrderByOrderNumber_result> {
//
//      @Override
//      public void write(org.apache.thrift.protocol.TProtocol prot, getOrderByOrderNumber_result struct) throws TException {
//        TTupleProtocol oprot = (TTupleProtocol) prot;
//        BitSet optionals = new BitSet();
//        if (struct.isSetSuccess()) {
//          optionals.set(0);
//        }
//        oprot.writeBitSet(optionals, 1);
//        if (struct.isSetSuccess()) {
//          struct.success.write(oprot);
//        }
//      }
//
//      @Override
//      public void read(org.apache.thrift.protocol.TProtocol prot, getOrderByOrderNumber_result struct) throws TException {
//        TTupleProtocol iprot = (TTupleProtocol) prot;
//        BitSet incoming = iprot.readBitSet(1);
//        if (incoming.get(0)) {
//          struct.success = new TOrder();
//          struct.success.read(iprot);
//          struct.setSuccessIsSet(true);
//        }
//      }
//    }
//
//  }
//
//  public static class getOrdersByStatus_args implements org.apache.thrift.TBase<getOrdersByStatus_args, getOrdersByStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrdersByStatus_args>   {
//    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrdersByStatus_args");
//
//    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
//
//    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
//    static {
//      schemes.put(StandardScheme.class, new getOrdersByStatus_argsStandardSchemeFactory());
//      schemes.put(TupleScheme.class, new getOrdersByStatus_argsTupleSchemeFactory());
//    }
//
//    public int status; // required
//
//    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
//    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
//      STATUS((short)1, "status");
//
//      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
//
//      static {
//        for (_Fields field : EnumSet.allOf(_Fields.class)) {
//          byName.put(field.getFieldName(), field);
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, or null if its not found.
//       */
//      public static _Fields findByThriftId(int fieldId) {
//        switch(fieldId) {
//          case 1: // STATUS
//            return STATUS;
//          default:
//            return null;
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, throwing an exception
//       * if it is not found.
//       */
//      public static _Fields findByThriftIdOrThrow(int fieldId) {
//        _Fields fields = findByThriftId(fieldId);
//        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
//        return fields;
//      }
//
//      /**
//       * Find the _Fields constant that matches name, or null if its not found.
//       */
//      public static _Fields findByName(String name) {
//        return byName.get(name);
//      }
//
//      private final short _thriftId;
//      private final String _fieldName;
//
//      _Fields(short thriftId, String fieldName) {
//        _thriftId = thriftId;
//        _fieldName = fieldName;
//      }
//
//      public short getThriftFieldId() {
//        return _thriftId;
//      }
//
//      public String getFieldName() {
//        return _fieldName;
//      }
//    }
//
//    // isset id assignments
//    private static final int __STATUS_ISSET_ID = 0;
//    private byte __isset_bitfield = 0;
//    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
//    static {
//      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
//      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
//          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
//      metaDataMap = Collections.unmodifiableMap(tmpMap);
//      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrdersByStatus_args.class, metaDataMap);
//    }
//
//    public getOrdersByStatus_args() {
//    }
//
//    public getOrdersByStatus_args(
//      int status)
//    {
//      this();
//      this.status = status;
//      setStatusIsSet(true);
//    }
//
//    /**
//     * Performs a deep copy on <i>other</i>.
//     */
//    public getOrdersByStatus_args(getOrdersByStatus_args other) {
//      __isset_bitfield = other.__isset_bitfield;
//      this.status = other.status;
//    }
//
//    public getOrdersByStatus_args deepCopy() {
//      return new getOrdersByStatus_args(this);
//    }
//
//    @Override
//    public void clear() {
//      setStatusIsSet(false);
//      this.status = 0;
//    }
//
//    public int getStatus() {
//      return this.status;
//    }
//
//    public getOrdersByStatus_args setStatus(int status) {
//      this.status = status;
//      setStatusIsSet(true);
//      return this;
//    }
//
//    public void unsetStatus() {
//      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
//    }
//
//    /** Returns true if field status is set (has been assigned a value) and false otherwise */
//    public boolean isSetStatus() {
//      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
//    }
//
//    public void setStatusIsSet(boolean value) {
//      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
//    }
//
//    public void setFieldValue(_Fields field, Object value) {
//      switch (field) {
//      case STATUS:
//        if (value == null) {
//          unsetStatus();
//        } else {
//          setStatus((Integer)value);
//        }
//        break;
//
//      }
//    }
//
//    public Object getFieldValue(_Fields field) {
//      switch (field) {
//      case STATUS:
//        return getStatus();
//
//      }
//      throw new IllegalStateException();
//    }
//
//    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
//    public boolean isSet(_Fields field) {
//      if (field == null) {
//        throw new IllegalArgumentException();
//      }
//
//      switch (field) {
//      case STATUS:
//        return isSetStatus();
//      }
//      throw new IllegalStateException();
//    }
//
//    @Override
//    public boolean equals(Object that) {
//      if (that == null)
//        return false;
//      if (that instanceof getOrdersByStatus_args)
//        return this.equals((getOrdersByStatus_args)that);
//      return false;
//    }
//
//    public boolean equals(getOrdersByStatus_args that) {
//      if (that == null)
//        return false;
//
//      boolean this_present_status = true;
//      boolean that_present_status = true;
//      if (this_present_status || that_present_status) {
//        if (!(this_present_status && that_present_status))
//          return false;
//        if (this.status != that.status)
//          return false;
//      }
//
//      return true;
//    }
//
//    @Override
//    public int hashCode() {
//      List<Object> list = new ArrayList<Object>();
//
//      boolean present_status = true;
//      list.add(present_status);
//      if (present_status)
//        list.add(status);
//
//      return list.hashCode();
//    }
//
//    @Override
//    public int compareTo(getOrdersByStatus_args other) {
//      if (!getClass().equals(other.getClass())) {
//        return getClass().getName().compareTo(other.getClass().getName());
//      }
//
//      int lastComparison = 0;
//
//      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//      if (isSetStatus()) {
//        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
//        if (lastComparison != 0) {
//          return lastComparison;
//        }
//      }
//      return 0;
//    }
//
//    public _Fields fieldForId(int fieldId) {
//      return _Fields.findByThriftId(fieldId);
//    }
//
//    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
//      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
//    }
//
//    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
//      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
//    }
//
//    @Override
//    public String toString() {
//      StringBuilder sb = new StringBuilder("getOrdersByStatus_args(");
//      boolean first = true;
//
//      sb.append("status:");
//      sb.append(this.status);
//      first = false;
//      sb.append(")");
//      return sb.toString();
//    }
//
//    public void validate() throws TException {
//      // check for required fields
//      // check for sub-struct validity
//    }
//
//    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
//      try {
//        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
//      } catch (TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
//      try {
//        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
//        __isset_bitfield = 0;
//        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
//      } catch (TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private static class getOrdersByStatus_argsStandardSchemeFactory implements SchemeFactory {
//      public getOrdersByStatus_argsStandardScheme getScheme() {
//        return new getOrdersByStatus_argsStandardScheme();
//      }
//    }
//
//    private static class getOrdersByStatus_argsStandardScheme extends StandardScheme<getOrdersByStatus_args> {
//
//      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrdersByStatus_args struct) throws TException {
//        org.apache.thrift.protocol.TField schemeField;
//        iprot.readStructBegin();
//        while (true)
//        {
//          schemeField = iprot.readFieldBegin();
//          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
//            break;
//          }
//          switch (schemeField.id) {
//            case 1: // STATUS
//              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
//                struct.status = iprot.readI32();
//                struct.setStatusIsSet(true);
//              } else {
//                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//              }
//              break;
//            default:
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//          }
//          iprot.readFieldEnd();
//        }
//        iprot.readStructEnd();
//
//        // check for required fields of primitive type, which can't be checked in the validate method
//        struct.validate();
//      }
//
//      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrdersByStatus_args struct) throws TException {
//        struct.validate();
//
//        oprot.writeStructBegin(STRUCT_DESC);
//        oprot.writeFieldBegin(STATUS_FIELD_DESC);
//        oprot.writeI32(struct.status);
//        oprot.writeFieldEnd();
//        oprot.writeFieldStop();
//        oprot.writeStructEnd();
//      }
//
//    }
//
//    private static class getOrdersByStatus_argsTupleSchemeFactory implements SchemeFactory {
//      public getOrdersByStatus_argsTupleScheme getScheme() {
//        return new getOrdersByStatus_argsTupleScheme();
//      }
//    }
//
//    private static class getOrdersByStatus_argsTupleScheme extends TupleScheme<getOrdersByStatus_args> {
//
//      @Override
//      public void write(org.apache.thrift.protocol.TProtocol prot, getOrdersByStatus_args struct) throws TException {
//        TTupleProtocol oprot = (TTupleProtocol) prot;
//        BitSet optionals = new BitSet();
//        if (struct.isSetStatus()) {
//          optionals.set(0);
//        }
//        oprot.writeBitSet(optionals, 1);
//        if (struct.isSetStatus()) {
//          oprot.writeI32(struct.status);
//        }
//      }
//
//      @Override
//      public void read(org.apache.thrift.protocol.TProtocol prot, getOrdersByStatus_args struct) throws TException {
//        TTupleProtocol iprot = (TTupleProtocol) prot;
//        BitSet incoming = iprot.readBitSet(1);
//        if (incoming.get(0)) {
//          struct.status = iprot.readI32();
//          struct.setStatusIsSet(true);
//        }
//      }
//    }
//
//  }
//
//  public static class getOrdersByStatus_result implements org.apache.thrift.TBase<getOrdersByStatus_result, getOrdersByStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrdersByStatus_result>   {
//    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrdersByStatus_result");
//
//    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
//
//    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
//    static {
//      schemes.put(StandardScheme.class, new getOrdersByStatus_resultStandardSchemeFactory());
//      schemes.put(TupleScheme.class, new getOrdersByStatus_resultTupleSchemeFactory());
//    }
//
//    public List<TOrder> success; // required
//
//    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
//    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
//      SUCCESS((short)0, "success");
//
//      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
//
//      static {
//        for (_Fields field : EnumSet.allOf(_Fields.class)) {
//          byName.put(field.getFieldName(), field);
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, or null if its not found.
//       */
//      public static _Fields findByThriftId(int fieldId) {
//        switch(fieldId) {
//          case 0: // SUCCESS
//            return SUCCESS;
//          default:
//            return null;
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, throwing an exception
//       * if it is not found.
//       */
//      public static _Fields findByThriftIdOrThrow(int fieldId) {
//        _Fields fields = findByThriftId(fieldId);
//        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
//        return fields;
//      }
//
//      /**
//       * Find the _Fields constant that matches name, or null if its not found.
//       */
//      public static _Fields findByName(String name) {
//        return byName.get(name);
//      }
//
//      private final short _thriftId;
//      private final String _fieldName;
//
//      _Fields(short thriftId, String fieldName) {
//        _thriftId = thriftId;
//        _fieldName = fieldName;
//      }
//
//      public short getThriftFieldId() {
//        return _thriftId;
//      }
//
//      public String getFieldName() {
//        return _fieldName;
//      }
//    }
//
//    // isset id assignments
//    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
//    static {
//      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
//      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
//          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
//              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOrder.class))));
//      metaDataMap = Collections.unmodifiableMap(tmpMap);
//      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrdersByStatus_result.class, metaDataMap);
//    }
//
//    public getOrdersByStatus_result() {
//    }
//
//    public getOrdersByStatus_result(
//      List<TOrder> success)
//    {
//      this();
//      this.success = success;
//    }
//
//    /**
//     * Performs a deep copy on <i>other</i>.
//     */
//    public getOrdersByStatus_result(getOrdersByStatus_result other) {
//      if (other.isSetSuccess()) {
//        List<TOrder> __this__success = new ArrayList<TOrder>(other.success.size());
//        for (TOrder other_element : other.success) {
//          __this__success.add(new TOrder(other_element));
//        }
//        this.success = __this__success;
//      }
//    }
//
//    public getOrdersByStatus_result deepCopy() {
//      return new getOrdersByStatus_result(this);
//    }
//
//    @Override
//    public void clear() {
//      this.success = null;
//    }
//
//    public int getSuccessSize() {
//      return (this.success == null) ? 0 : this.success.size();
//    }
//
//    public java.util.Iterator<TOrder> getSuccessIterator() {
//      return (this.success == null) ? null : this.success.iterator();
//    }
//
//    public void addToSuccess(TOrder elem) {
//      if (this.success == null) {
//        this.success = new ArrayList<TOrder>();
//      }
//      this.success.add(elem);
//    }
//
//    public List<TOrder> getSuccess() {
//      return this.success;
//    }
//
//    public getOrdersByStatus_result setSuccess(List<TOrder> success) {
//      this.success = success;
//      return this;
//    }
//
//    public void unsetSuccess() {
//      this.success = null;
//    }
//
//    /** Returns true if field success is set (has been assigned a value) and false otherwise */
//    public boolean isSetSuccess() {
//      return this.success != null;
//    }
//
//    public void setSuccessIsSet(boolean value) {
//      if (!value) {
//        this.success = null;
//      }
//    }
//
//    public void setFieldValue(_Fields field, Object value) {
//      switch (field) {
//      case SUCCESS:
//        if (value == null) {
//          unsetSuccess();
//        } else {
//          setSuccess((List<TOrder>)value);
//        }
//        break;
//
//      }
//    }
//
//    public Object getFieldValue(_Fields field) {
//      switch (field) {
//      case SUCCESS:
//        return getSuccess();
//
//      }
//      throw new IllegalStateException();
//    }
//
//    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
//    public boolean isSet(_Fields field) {
//      if (field == null) {
//        throw new IllegalArgumentException();
//      }
//
//      switch (field) {
//      case SUCCESS:
//        return isSetSuccess();
//      }
//      throw new IllegalStateException();
//    }
//
//    @Override
//    public boolean equals(Object that) {
//      if (that == null)
//        return false;
//      if (that instanceof getOrdersByStatus_result)
//        return this.equals((getOrdersByStatus_result)that);
//      return false;
//    }
//
//    public boolean equals(getOrdersByStatus_result that) {
//      if (that == null)
//        return false;
//
//      boolean this_present_success = true && this.isSetSuccess();
//      boolean that_present_success = true && that.isSetSuccess();
//      if (this_present_success || that_present_success) {
//        if (!(this_present_success && that_present_success))
//          return false;
//        if (!this.success.equals(that.success))
//          return false;
//      }
//
//      return true;
//    }
//
//    @Override
//    public int hashCode() {
//      List<Object> list = new ArrayList<Object>();
//
//      boolean present_success = true && (isSetSuccess());
//      list.add(present_success);
//      if (present_success)
//        list.add(success);
//
//      return list.hashCode();
//    }
//
//    @Override
//    public int compareTo(getOrdersByStatus_result other) {
//      if (!getClass().equals(other.getClass())) {
//        return getClass().getName().compareTo(other.getClass().getName());
//      }
//
//      int lastComparison = 0;
//
//      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//      if (isSetSuccess()) {
//        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
//        if (lastComparison != 0) {
//          return lastComparison;
//        }
//      }
//      return 0;
//    }
//
//    public _Fields fieldForId(int fieldId) {
//      return _Fields.findByThriftId(fieldId);
//    }
//
//    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
//      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
//    }
//
//    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
//      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
//      }
//
//    @Override
//    public String toString() {
//      StringBuilder sb = new StringBuilder("getOrdersByStatus_result(");
//      boolean first = true;
//
//      sb.append("success:");
//      if (this.success == null) {
//        sb.append("null");
//      } else {
//        sb.append(this.success);
//      }
//      first = false;
//      sb.append(")");
//      return sb.toString();
//    }
//
//    public void validate() throws TException {
//      // check for required fields
//      // check for sub-struct validity
//    }
//
//    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
//      try {
//        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
//      } catch (TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
//      try {
//        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
//      } catch (TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private static class getOrdersByStatus_resultStandardSchemeFactory implements SchemeFactory {
//      public getOrdersByStatus_resultStandardScheme getScheme() {
//        return new getOrdersByStatus_resultStandardScheme();
//      }
//    }
//
//    private static class getOrdersByStatus_resultStandardScheme extends StandardScheme<getOrdersByStatus_result> {
//
//      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrdersByStatus_result struct) throws TException {
//        org.apache.thrift.protocol.TField schemeField;
//        iprot.readStructBegin();
//        while (true)
//        {
//          schemeField = iprot.readFieldBegin();
//          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
//            break;
//          }
//          switch (schemeField.id) {
//            case 0: // SUCCESS
//              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
//                {
//                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
//                  struct.success = new ArrayList<TOrder>(_list8.size);
//                  TOrder _elem9;
//                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
//                  {
//                    _elem9 = new TOrder();
//                    _elem9.read(iprot);
//                    struct.success.add(_elem9);
//                  }
//                  iprot.readListEnd();
//                }
//                struct.setSuccessIsSet(true);
//              } else {
//                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//              }
//              break;
//            default:
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//          }
//          iprot.readFieldEnd();
//        }
//        iprot.readStructEnd();
//
//        // check for required fields of primitive type, which can't be checked in the validate method
//        struct.validate();
//      }
//
//      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrdersByStatus_result struct) throws TException {
//        struct.validate();
//
//        oprot.writeStructBegin(STRUCT_DESC);
//        if (struct.success != null) {
//          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
//          {
//            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
//            for (TOrder _iter11 : struct.success)
//            {
//              _iter11.write(oprot);
//            }
//            oprot.writeListEnd();
//          }
//          oprot.writeFieldEnd();
//        }
//        oprot.writeFieldStop();
//        oprot.writeStructEnd();
//      }
//
//    }
//
//    private static class getOrdersByStatus_resultTupleSchemeFactory implements SchemeFactory {
//      public getOrdersByStatus_resultTupleScheme getScheme() {
//        return new getOrdersByStatus_resultTupleScheme();
//      }
//    }
//
//    private static class getOrdersByStatus_resultTupleScheme extends TupleScheme<getOrdersByStatus_result> {
//
//      @Override
//      public void write(org.apache.thrift.protocol.TProtocol prot, getOrdersByStatus_result struct) throws TException {
//        TTupleProtocol oprot = (TTupleProtocol) prot;
//        BitSet optionals = new BitSet();
//        if (struct.isSetSuccess()) {
//          optionals.set(0);
//        }
//        oprot.writeBitSet(optionals, 1);
//        if (struct.isSetSuccess()) {
//          {
//            oprot.writeI32(struct.success.size());
//            for (TOrder _iter12 : struct.success)
//            {
//              _iter12.write(oprot);
//            }
//          }
//        }
//      }
//
//      @Override
//      public void read(org.apache.thrift.protocol.TProtocol prot, getOrdersByStatus_result struct) throws TException {
//        TTupleProtocol iprot = (TTupleProtocol) prot;
//        BitSet incoming = iprot.readBitSet(1);
//        if (incoming.get(0)) {
//          {
//            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
//            struct.success = new ArrayList<TOrder>(_list13.size);
//            TOrder _elem14;
//            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
//            {
//              _elem14 = new TOrder();
//              _elem14.read(iprot);
//              struct.success.add(_elem14);
//            }
//          }
//          struct.setSuccessIsSet(true);
//        }
//      }
//    }
//
//  }
//
//}
