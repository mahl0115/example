///**
// * Autogenerated by Thrift Compiler (0.9.3)
// *
// * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// *  @generated
// */
//package com.thrift.thrift;
//
//import org.apache.thrift.scheme.IScheme;
//import org.apache.thrift.scheme.SchemeFactory;
//import org.apache.thrift.scheme.StandardScheme;
//
//import org.apache.thrift.scheme.TupleScheme;
//import org.apache.thrift.protocol.TTupleProtocol;
//import org.apache.thrift.protocol.TProtocolException;
//import org.apache.thrift.EncodingUtils;
//import org.apache.thrift.TException;
//import org.apache.thrift.async.AsyncMethodCallback;
//import org.apache.thrift.server.AbstractNonblockingServer.*;
//import java.util.List;
//import java.util.ArrayList;
//import java.util.Map;
//import java.util.HashMap;
//import java.util.EnumMap;
//import java.util.Set;
//import java.util.HashSet;
//import java.util.EnumSet;
//import java.util.Collections;
//import java.util.BitSet;
//import java.nio.ByteBuffer;
//import java.util.Arrays;
//import javax.annotation.Generated;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
//
//@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
//@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-07")
//public class TOrder implements org.apache.thrift.TBase<TOrder, TOrder._Fields>, java.io.Serializable, Cloneable, Comparable<TOrder> {
//  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOrder");
//
//  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
//  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I32, (short)2);
//  private static final org.apache.thrift.protocol.TField ORDER_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
//  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)4);
//  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)5);
//  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)6);
//  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
//
//  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
//  static {
//    schemes.put(StandardScheme.class, new TOrderStandardSchemeFactory());
//    schemes.put(TupleScheme.class, new TOrderTupleSchemeFactory());
//  }
//
//  public int id; // required
//  public int orderId; // required
//  public String orderNumber; // required
//  public int userId; // required
//  public String title; // required
//  public String content; // required
//  public int status; // required
//
//  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
//  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
//    ID((short)1, "id"),
//    ORDER_ID((short)2, "orderId"),
//    ORDER_NUMBER((short)3, "orderNumber"),
//    USER_ID((short)4, "userId"),
//    TITLE((short)5, "title"),
//    CONTENT((short)6, "content"),
//    STATUS((short)7, "status");
//
//    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
//
//    static {
//      for (_Fields field : EnumSet.allOf(_Fields.class)) {
//        byName.put(field.getFieldName(), field);
//      }
//    }
//
//    /**
//     * Find the _Fields constant that matches fieldId, or null if its not found.
//     */
//    public static _Fields findByThriftId(int fieldId) {
//      switch(fieldId) {
//        case 1: // ID
//          return ID;
//        case 2: // ORDER_ID
//          return ORDER_ID;
//        case 3: // ORDER_NUMBER
//          return ORDER_NUMBER;
//        case 4: // USER_ID
//          return USER_ID;
//        case 5: // TITLE
//          return TITLE;
//        case 6: // CONTENT
//          return CONTENT;
//        case 7: // STATUS
//          return STATUS;
//        default:
//          return null;
//      }
//    }
//
//    /**
//     * Find the _Fields constant that matches fieldId, throwing an exception
//     * if it is not found.
//     */
//    public static _Fields findByThriftIdOrThrow(int fieldId) {
//      _Fields fields = findByThriftId(fieldId);
//      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
//      return fields;
//    }
//
//    /**
//     * Find the _Fields constant that matches name, or null if its not found.
//     */
//    public static _Fields findByName(String name) {
//      return byName.get(name);
//    }
//
//    private final short _thriftId;
//    private final String _fieldName;
//
//    _Fields(short thriftId, String fieldName) {
//      _thriftId = thriftId;
//      _fieldName = fieldName;
//    }
//
//    public short getThriftFieldId() {
//      return _thriftId;
//    }
//
//    public String getFieldName() {
//      return _fieldName;
//    }
//  }
//
//  // isset id assignments
//  private static final int __ID_ISSET_ID = 0;
//  private static final int __ORDERID_ISSET_ID = 1;
//  private static final int __USERID_ISSET_ID = 2;
//  private static final int __STATUS_ISSET_ID = 3;
//  private byte __isset_bitfield = 0;
//  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
//  static {
//    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
//    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
//        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
//    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT,
//        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
//    tmpMap.put(_Fields.ORDER_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("orderNumber", org.apache.thrift.TFieldRequirementType.DEFAULT,
//        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
//    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
//        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
//    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT,
//        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
//    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
//        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
//    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
//        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
//    metaDataMap = Collections.unmodifiableMap(tmpMap);
//    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOrder.class, metaDataMap);
//  }
//
//  public TOrder() {
//  }
//
//  public TOrder(
//    int id,
//    int orderId,
//    String orderNumber,
//    int userId,
//    String title,
//    String content,
//    int status)
//  {
//    this();
//    this.id = id;
//    setIdIsSet(true);
//    this.orderId = orderId;
//    setOrderIdIsSet(true);
//    this.orderNumber = orderNumber;
//    this.userId = userId;
//    setUserIdIsSet(true);
//    this.title = title;
//    this.content = content;
//    this.status = status;
//    setStatusIsSet(true);
//  }
//
//  /**
//   * Performs a deep copy on <i>other</i>.
//   */
//  public TOrder(TOrder other) {
//    __isset_bitfield = other.__isset_bitfield;
//    this.id = other.id;
//    this.orderId = other.orderId;
//    if (other.isSetOrderNumber()) {
//      this.orderNumber = other.orderNumber;
//    }
//    this.userId = other.userId;
//    if (other.isSetTitle()) {
//      this.title = other.title;
//    }
//    if (other.isSetContent()) {
//      this.content = other.content;
//    }
//    this.status = other.status;
//  }
//
//  public TOrder deepCopy() {
//    return new TOrder(this);
//  }
//
//  @Override
//  public void clear() {
//    setIdIsSet(false);
//    this.id = 0;
//    setOrderIdIsSet(false);
//    this.orderId = 0;
//    this.orderNumber = null;
//    setUserIdIsSet(false);
//    this.userId = 0;
//    this.title = null;
//    this.content = null;
//    setStatusIsSet(false);
//    this.status = 0;
//  }
//
//  public int getId() {
//    return this.id;
//  }
//
//  public TOrder setId(int id) {
//    this.id = id;
//    setIdIsSet(true);
//    return this;
//  }
//
//  public void unsetId() {
//    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
//  }
//
//  /** Returns true if field id is set (has been assigned a value) and false otherwise */
//  public boolean isSetId() {
//    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
//  }
//
//  public void setIdIsSet(boolean value) {
//    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
//  }
//
//  public int getOrderId() {
//    return this.orderId;
//  }
//
//  public TOrder setOrderId(int orderId) {
//    this.orderId = orderId;
//    setOrderIdIsSet(true);
//    return this;
//  }
//
//  public void unsetOrderId() {
//    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
//  }
//
//  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
//  public boolean isSetOrderId() {
//    return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
//  }
//
//  public void setOrderIdIsSet(boolean value) {
//    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
//  }
//
//  public String getOrderNumber() {
//    return this.orderNumber;
//  }
//
//  public TOrder setOrderNumber(String orderNumber) {
//    this.orderNumber = orderNumber;
//    return this;
//  }
//
//  public void unsetOrderNumber() {
//    this.orderNumber = null;
//  }
//
//  /** Returns true if field orderNumber is set (has been assigned a value) and false otherwise */
//  public boolean isSetOrderNumber() {
//    return this.orderNumber != null;
//  }
//
//  public void setOrderNumberIsSet(boolean value) {
//    if (!value) {
//      this.orderNumber = null;
//    }
//  }
//
//  public int getUserId() {
//    return this.userId;
//  }
//
//  public TOrder setUserId(int userId) {
//    this.userId = userId;
//    setUserIdIsSet(true);
//    return this;
//  }
//
//  public void unsetUserId() {
//    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
//  }
//
//  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
//  public boolean isSetUserId() {
//    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
//  }
//
//  public void setUserIdIsSet(boolean value) {
//    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
//  }
//
//  public String getTitle() {
//    return this.title;
//  }
//
//  public TOrder setTitle(String title) {
//    this.title = title;
//    return this;
//  }
//
//  public void unsetTitle() {
//    this.title = null;
//  }
//
//  /** Returns true if field title is set (has been assigned a value) and false otherwise */
//  public boolean isSetTitle() {
//    return this.title != null;
//  }
//
//  public void setTitleIsSet(boolean value) {
//    if (!value) {
//      this.title = null;
//    }
//  }
//
//  public String getContent() {
//    return this.content;
//  }
//
//  public TOrder setContent(String content) {
//    this.content = content;
//    return this;
//  }
//
//  public void unsetContent() {
//    this.content = null;
//  }
//
//  /** Returns true if field content is set (has been assigned a value) and false otherwise */
//  public boolean isSetContent() {
//    return this.content != null;
//  }
//
//  public void setContentIsSet(boolean value) {
//    if (!value) {
//      this.content = null;
//    }
//  }
//
//  public int getStatus() {
//    return this.status;
//  }
//
//  public TOrder setStatus(int status) {
//    this.status = status;
//    setStatusIsSet(true);
//    return this;
//  }
//
//  public void unsetStatus() {
//    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
//  }
//
//  /** Returns true if field status is set (has been assigned a value) and false otherwise */
//  public boolean isSetStatus() {
//    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
//  }
//
//  public void setStatusIsSet(boolean value) {
//    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
//  }
//
//  public void setFieldValue(_Fields field, Object value) {
//    switch (field) {
//    case ID:
//      if (value == null) {
//        unsetId();
//      } else {
//        setId((Integer)value);
//      }
//      break;
//
//    case ORDER_ID:
//      if (value == null) {
//        unsetOrderId();
//      } else {
//        setOrderId((Integer)value);
//      }
//      break;
//
//    case ORDER_NUMBER:
//      if (value == null) {
//        unsetOrderNumber();
//      } else {
//        setOrderNumber((String)value);
//      }
//      break;
//
//    case USER_ID:
//      if (value == null) {
//        unsetUserId();
//      } else {
//        setUserId((Integer)value);
//      }
//      break;
//
//    case TITLE:
//      if (value == null) {
//        unsetTitle();
//      } else {
//        setTitle((String)value);
//      }
//      break;
//
//    case CONTENT:
//      if (value == null) {
//        unsetContent();
//      } else {
//        setContent((String)value);
//      }
//      break;
//
//    case STATUS:
//      if (value == null) {
//        unsetStatus();
//      } else {
//        setStatus((Integer)value);
//      }
//      break;
//
//    }
//  }
//
//  public Object getFieldValue(_Fields field) {
//    switch (field) {
//    case ID:
//      return getId();
//
//    case ORDER_ID:
//      return getOrderId();
//
//    case ORDER_NUMBER:
//      return getOrderNumber();
//
//    case USER_ID:
//      return getUserId();
//
//    case TITLE:
//      return getTitle();
//
//    case CONTENT:
//      return getContent();
//
//    case STATUS:
//      return getStatus();
//
//    }
//    throw new IllegalStateException();
//  }
//
//  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
//  public boolean isSet(_Fields field) {
//    if (field == null) {
//      throw new IllegalArgumentException();
//    }
//
//    switch (field) {
//    case ID:
//      return isSetId();
//    case ORDER_ID:
//      return isSetOrderId();
//    case ORDER_NUMBER:
//      return isSetOrderNumber();
//    case USER_ID:
//      return isSetUserId();
//    case TITLE:
//      return isSetTitle();
//    case CONTENT:
//      return isSetContent();
//    case STATUS:
//      return isSetStatus();
//    }
//    throw new IllegalStateException();
//  }
//
//  @Override
//  public boolean equals(Object that) {
//    if (that == null)
//      return false;
//    if (that instanceof TOrder)
//      return this.equals((TOrder)that);
//    return false;
//  }
//
//  public boolean equals(TOrder that) {
//    if (that == null)
//      return false;
//
//    boolean this_present_id = true;
//    boolean that_present_id = true;
//    if (this_present_id || that_present_id) {
//      if (!(this_present_id && that_present_id))
//        return false;
//      if (this.id != that.id)
//        return false;
//    }
//
//    boolean this_present_orderId = true;
//    boolean that_present_orderId = true;
//    if (this_present_orderId || that_present_orderId) {
//      if (!(this_present_orderId && that_present_orderId))
//        return false;
//      if (this.orderId != that.orderId)
//        return false;
//    }
//
//    boolean this_present_orderNumber = true && this.isSetOrderNumber();
//    boolean that_present_orderNumber = true && that.isSetOrderNumber();
//    if (this_present_orderNumber || that_present_orderNumber) {
//      if (!(this_present_orderNumber && that_present_orderNumber))
//        return false;
//      if (!this.orderNumber.equals(that.orderNumber))
//        return false;
//    }
//
//    boolean this_present_userId = true;
//    boolean that_present_userId = true;
//    if (this_present_userId || that_present_userId) {
//      if (!(this_present_userId && that_present_userId))
//        return false;
//      if (this.userId != that.userId)
//        return false;
//    }
//
//    boolean this_present_title = true && this.isSetTitle();
//    boolean that_present_title = true && that.isSetTitle();
//    if (this_present_title || that_present_title) {
//      if (!(this_present_title && that_present_title))
//        return false;
//      if (!this.title.equals(that.title))
//        return false;
//    }
//
//    boolean this_present_content = true && this.isSetContent();
//    boolean that_present_content = true && that.isSetContent();
//    if (this_present_content || that_present_content) {
//      if (!(this_present_content && that_present_content))
//        return false;
//      if (!this.content.equals(that.content))
//        return false;
//    }
//
//    boolean this_present_status = true;
//    boolean that_present_status = true;
//    if (this_present_status || that_present_status) {
//      if (!(this_present_status && that_present_status))
//        return false;
//      if (this.status != that.status)
//        return false;
//    }
//
//    return true;
//  }
//
//  @Override
//  public int hashCode() {
//    List<Object> list = new ArrayList<Object>();
//
//    boolean present_id = true;
//    list.add(present_id);
//    if (present_id)
//      list.add(id);
//
//    boolean present_orderId = true;
//    list.add(present_orderId);
//    if (present_orderId)
//      list.add(orderId);
//
//    boolean present_orderNumber = true && (isSetOrderNumber());
//    list.add(present_orderNumber);
//    if (present_orderNumber)
//      list.add(orderNumber);
//
//    boolean present_userId = true;
//    list.add(present_userId);
//    if (present_userId)
//      list.add(userId);
//
//    boolean present_title = true && (isSetTitle());
//    list.add(present_title);
//    if (present_title)
//      list.add(title);
//
//    boolean present_content = true && (isSetContent());
//    list.add(present_content);
//    if (present_content)
//      list.add(content);
//
//    boolean present_status = true;
//    list.add(present_status);
//    if (present_status)
//      list.add(status);
//
//    return list.hashCode();
//  }
//
//  @Override
//  public int compareTo(TOrder other) {
//    if (!getClass().equals(other.getClass())) {
//      return getClass().getName().compareTo(other.getClass().getName());
//    }
//
//    int lastComparison = 0;
//
//    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
//    if (lastComparison != 0) {
//      return lastComparison;
//    }
//    if (isSetId()) {
//      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//    }
//    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
//    if (lastComparison != 0) {
//      return lastComparison;
//    }
//    if (isSetOrderId()) {
//      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//    }
//    lastComparison = Boolean.valueOf(isSetOrderNumber()).compareTo(other.isSetOrderNumber());
//    if (lastComparison != 0) {
//      return lastComparison;
//    }
//    if (isSetOrderNumber()) {
//      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNumber, other.orderNumber);
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//    }
//    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
//    if (lastComparison != 0) {
//      return lastComparison;
//    }
//    if (isSetUserId()) {
//      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//    }
//    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
//    if (lastComparison != 0) {
//      return lastComparison;
//    }
//    if (isSetTitle()) {
//      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//    }
//    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
//    if (lastComparison != 0) {
//      return lastComparison;
//    }
//    if (isSetContent()) {
//      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//    }
//    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
//    if (lastComparison != 0) {
//      return lastComparison;
//    }
//    if (isSetStatus()) {
//      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//    }
//    return 0;
//  }
//
//  public _Fields fieldForId(int fieldId) {
//    return _Fields.findByThriftId(fieldId);
//  }
//
//  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
//    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
//  }
//
//  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
//    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
//  }
//
//  @Override
//  public String toString() {
//    StringBuilder sb = new StringBuilder("TOrder(");
//    boolean first = true;
//
//    sb.append("id:");
//    sb.append(this.id);
//    first = false;
//    if (!first) sb.append(", ");
//    sb.append("orderId:");
//    sb.append(this.orderId);
//    first = false;
//    if (!first) sb.append(", ");
//    sb.append("orderNumber:");
//    if (this.orderNumber == null) {
//      sb.append("null");
//    } else {
//      sb.append(this.orderNumber);
//    }
//    first = false;
//    if (!first) sb.append(", ");
//    sb.append("userId:");
//    sb.append(this.userId);
//    first = false;
//    if (!first) sb.append(", ");
//    sb.append("title:");
//    if (this.title == null) {
//      sb.append("null");
//    } else {
//      sb.append(this.title);
//    }
//    first = false;
//    if (!first) sb.append(", ");
//    sb.append("content:");
//    if (this.content == null) {
//      sb.append("null");
//    } else {
//      sb.append(this.content);
//    }
//    first = false;
//    if (!first) sb.append(", ");
//    sb.append("status:");
//    sb.append(this.status);
//    first = false;
//    sb.append(")");
//    return sb.toString();
//  }
//
//  public void validate() throws TException {
//    // check for required fields
//    // check for sub-struct validity
//  }
//
//  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
//    try {
//      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
//    } catch (TException te) {
//      throw new java.io.IOException(te);
//    }
//  }
//
//  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
//    try {
//      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
//      __isset_bitfield = 0;
//      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
//    } catch (TException te) {
//      throw new java.io.IOException(te);
//    }
//  }
//
//  private static class TOrderStandardSchemeFactory implements SchemeFactory {
//    public TOrderStandardScheme getScheme() {
//      return new TOrderStandardScheme();
//    }
//  }
//
//  private static class TOrderStandardScheme extends StandardScheme<TOrder> {
//
//    public void read(org.apache.thrift.protocol.TProtocol iprot, TOrder struct) throws TException {
//      org.apache.thrift.protocol.TField schemeField;
//      iprot.readStructBegin();
//      while (true)
//      {
//        schemeField = iprot.readFieldBegin();
//        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
//          break;
//        }
//        switch (schemeField.id) {
//          case 1: // ID
//            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
//              struct.id = iprot.readI32();
//              struct.setIdIsSet(true);
//            } else {
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//            }
//            break;
//          case 2: // ORDER_ID
//            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
//              struct.orderId = iprot.readI32();
//              struct.setOrderIdIsSet(true);
//            } else {
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//            }
//            break;
//          case 3: // ORDER_NUMBER
//            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
//              struct.orderNumber = iprot.readString();
//              struct.setOrderNumberIsSet(true);
//            } else {
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//            }
//            break;
//          case 4: // USER_ID
//            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
//              struct.userId = iprot.readI32();
//              struct.setUserIdIsSet(true);
//            } else {
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//            }
//            break;
//          case 5: // TITLE
//            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
//              struct.title = iprot.readString();
//              struct.setTitleIsSet(true);
//            } else {
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//            }
//            break;
//          case 6: // CONTENT
//            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
//              struct.content = iprot.readString();
//              struct.setContentIsSet(true);
//            } else {
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//            }
//            break;
//          case 7: // STATUS
//            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
//              struct.status = iprot.readI32();
//              struct.setStatusIsSet(true);
//            } else {
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//            }
//            break;
//          default:
//            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//        }
//        iprot.readFieldEnd();
//      }
//      iprot.readStructEnd();
//
//      // check for required fields of primitive type, which can't be checked in the validate method
//      struct.validate();
//    }
//
//    public void write(org.apache.thrift.protocol.TProtocol oprot, TOrder struct) throws TException {
//      struct.validate();
//
//      oprot.writeStructBegin(STRUCT_DESC);
//      oprot.writeFieldBegin(ID_FIELD_DESC);
//      oprot.writeI32(struct.id);
//      oprot.writeFieldEnd();
//      oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
//      oprot.writeI32(struct.orderId);
//      oprot.writeFieldEnd();
//      if (struct.orderNumber != null) {
//        oprot.writeFieldBegin(ORDER_NUMBER_FIELD_DESC);
//        oprot.writeString(struct.orderNumber);
//        oprot.writeFieldEnd();
//      }
//      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
//      oprot.writeI32(struct.userId);
//      oprot.writeFieldEnd();
//      if (struct.title != null) {
//        oprot.writeFieldBegin(TITLE_FIELD_DESC);
//        oprot.writeString(struct.title);
//        oprot.writeFieldEnd();
//      }
//      if (struct.content != null) {
//        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
//        oprot.writeString(struct.content);
//        oprot.writeFieldEnd();
//      }
//      oprot.writeFieldBegin(STATUS_FIELD_DESC);
//      oprot.writeI32(struct.status);
//      oprot.writeFieldEnd();
//      oprot.writeFieldStop();
//      oprot.writeStructEnd();
//    }
//
//  }
//
//  private static class TOrderTupleSchemeFactory implements SchemeFactory {
//    public TOrderTupleScheme getScheme() {
//      return new TOrderTupleScheme();
//    }
//  }
//
//  private static class TOrderTupleScheme extends TupleScheme<TOrder> {
//
//    @Override
//    public void write(org.apache.thrift.protocol.TProtocol prot, TOrder struct) throws TException {
//      TTupleProtocol oprot = (TTupleProtocol) prot;
//      BitSet optionals = new BitSet();
//      if (struct.isSetId()) {
//        optionals.set(0);
//      }
//      if (struct.isSetOrderId()) {
//        optionals.set(1);
//      }
//      if (struct.isSetOrderNumber()) {
//        optionals.set(2);
//      }
//      if (struct.isSetUserId()) {
//        optionals.set(3);
//      }
//      if (struct.isSetTitle()) {
//        optionals.set(4);
//      }
//      if (struct.isSetContent()) {
//        optionals.set(5);
//      }
//      if (struct.isSetStatus()) {
//        optionals.set(6);
//      }
//      oprot.writeBitSet(optionals, 7);
//      if (struct.isSetId()) {
//        oprot.writeI32(struct.id);
//      }
//      if (struct.isSetOrderId()) {
//        oprot.writeI32(struct.orderId);
//      }
//      if (struct.isSetOrderNumber()) {
//        oprot.writeString(struct.orderNumber);
//      }
//      if (struct.isSetUserId()) {
//        oprot.writeI32(struct.userId);
//      }
//      if (struct.isSetTitle()) {
//        oprot.writeString(struct.title);
//      }
//      if (struct.isSetContent()) {
//        oprot.writeString(struct.content);
//      }
//      if (struct.isSetStatus()) {
//        oprot.writeI32(struct.status);
//      }
//    }
//
//    @Override
//    public void read(org.apache.thrift.protocol.TProtocol prot, TOrder struct) throws TException {
//      TTupleProtocol iprot = (TTupleProtocol) prot;
//      BitSet incoming = iprot.readBitSet(7);
//      if (incoming.get(0)) {
//        struct.id = iprot.readI32();
//        struct.setIdIsSet(true);
//      }
//      if (incoming.get(1)) {
//        struct.orderId = iprot.readI32();
//        struct.setOrderIdIsSet(true);
//      }
//      if (incoming.get(2)) {
//        struct.orderNumber = iprot.readString();
//        struct.setOrderNumberIsSet(true);
//      }
//      if (incoming.get(3)) {
//        struct.userId = iprot.readI32();
//        struct.setUserIdIsSet(true);
//      }
//      if (incoming.get(4)) {
//        struct.title = iprot.readString();
//        struct.setTitleIsSet(true);
//      }
//      if (incoming.get(5)) {
//        struct.content = iprot.readString();
//        struct.setContentIsSet(true);
//      }
//      if (incoming.get(6)) {
//        struct.status = iprot.readI32();
//        struct.setStatusIsSet(true);
//      }
//    }
//  }
//
//}
//
